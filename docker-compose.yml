version: "3.9"

services:
  # Create RabbitMQ container.
  # It is optional in case you don't have your RabbitMQ already.
  ylem-message-broker:
    image: rabbitmq:3-management-alpine
    container_name: ylem-message-broker
    ports:
      - 5672:5672   # for sender and consumer connections
      - 15672:15672 # for RabbitMQ GUI
    volumes:
      - ${HOME}/dev-rabbitmq/data/:/var/lib/rabbitmq
      - ${HOME}/dev-rabbitmq/log/:/var/log/rabbitmq
    restart: always
    networks:
      - ylem-rmq-network

  # Create RESTful API to populate messages in RabbitMQ.
  # This one is also optional in case you don't have your own data producer.
  ylem-producer:
    container_name: ylem-producer
    ports:
      - 3240:3240
    build:
      context: .
      dockerfile: Dockerfile-producer
    environment:
      AMQP_SERVER_URL: ${AMQP_SERVER_URL}
      QUEUE_NAME: ${QUEUE_NAME}
    restart: always
    networks:
      - ylem-rmq-network
    depends_on:
      - ylem-message-broker

  # Create container with message consumer.
  ylem-consumer:
    container_name: ylem-consumer
    build:
      context: .
      dockerfile: Dockerfile-consumer
    environment:
      AMQP_SERVER_URL: ${AMQP_SERVER_URL}
      YLEM_API_URL: ${YLEM_API_URL}
      YLEM_API_CLIENT_ID: ${YLEM_API_CLIENT_ID}
      YLEM_API_CLIENT_SECRET: ${YLEM_API_CLIENT_SECRET}
      QUEUE_NAME: ${QUEUE_NAME}
      PIPELINE_UUID: ${PIPELINE_UUID}
    restart: always
    networks:
      - ylem-rmq-network
    depends_on:
      - ylem-message-broker

networks:
  # Create a new Docker network.
  ylem-rmq-network:
    driver: bridge
